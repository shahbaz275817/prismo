// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/shahbaz275817/prismo/internal/models"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/shahbaz275817/prismo/internal/repository"
)

// MockTransactionService is an autogenerated mock type for the Service type
type MockTransactionService struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: ctx, _a1
func (_m *MockTransactionService) Cancel(ctx context.Context, _a1 *models.Transaction) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, driverID
func (_m *MockTransactionService) Create(ctx context.Context, driverID int64) (*models.Transaction, error) {
	ret := _m.Called(ctx, driverID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Transaction, error)); ok {
		return rf(ctx, driverID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Transaction); ok {
		r0 = rf(ctx, driverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, driverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, query
func (_m *MockTransactionService) Get(ctx context.Context, query *models.Transaction) (*models.Transaction, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) (*models.Transaction, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) *models.Transaction); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Transaction) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWithCount provides a mock function with given fields: ctx, query, request
func (_m *MockTransactionService) GetAllWithCount(ctx context.Context, query *models.Transaction, request repository.FilterRequest) ([]models.Transaction, int, error) {
	ret := _m.Called(ctx, query, request)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWithCount")
	}

	var r0 []models.Transaction
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction, repository.FilterRequest) ([]models.Transaction, int, error)); ok {
		return rf(ctx, query, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction, repository.FilterRequest) []models.Transaction); ok {
		r0 = rf(ctx, query, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Transaction, repository.FilterRequest) int); ok {
		r1 = rf(ctx, query, request)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.Transaction, repository.FilterRequest) error); ok {
		r2 = rf(ctx, query, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProofOfSettlement provides a mock function with given fields: ctx, _a1
func (_m *MockTransactionService) GetProofOfSettlement(ctx context.Context, _a1 *models.Transaction) (string, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProofOfSettlement")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) (string, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Transaction) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1, update
func (_m *MockTransactionService) Update(ctx context.Context, _a1 *models.Transaction, update *models.Transaction) error {
	ret := _m.Called(ctx, _a1, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction, *models.Transaction) error); ok {
		r0 = rf(ctx, _a1, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFromPaymentClient provides a mock function with given fields: ctx, transactionID
func (_m *MockTransactionService) UpdateFromPaymentClient(ctx context.Context, transactionID string) error {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFromPaymentClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTransactionService creates a new instance of MockTransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionService {
	mock := &MockTransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
