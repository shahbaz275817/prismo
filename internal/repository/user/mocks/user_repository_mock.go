// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/shahbaz275817/prismo/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the MockUserRepository type
type MockUserRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, query
func (_m *MockUserRepository) Get(ctx context.Context, query *models.User) (*models.User, error) {
	ret := _m.Called(ctx, query)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithHubs provides a mock function with given fields: ctx, query
func (_m *MockUserRepository) GetWithHubs(ctx context.Context, query *models.User) (*models.User, error) {
	ret := _m.Called(ctx, query)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, query
func (_m *MockUserRepository) Save(ctx context.Context, query *models.User) error {
	ret := _m.Called(ctx, query)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, query, update
func (_m *MockUserRepository) Update(ctx context.Context, query *models.User, update map[string]interface{}) error {
	ret := _m.Called(ctx, query, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, map[string]interface{}) error); ok {
		r0 = rf(ctx, query, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserRepository(t mockConstructorTestingTNewMockUserRepository) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
