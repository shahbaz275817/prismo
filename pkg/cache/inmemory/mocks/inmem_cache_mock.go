// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/shahbaz275817/prismo/pkg/cache/inmemory"

	mock "github.com/stretchr/testify/mock"
)

// MockInMemCache is an autogenerated mock type for the InMemCache type
type MockInMemCache struct {
	mock.Mock
}

// LoadValue provides a mock function with given fields: ctx, key
func (_m *MockInMemCache) LoadValue(ctx context.Context, key interface{}) (interface{}, error) {
	ret := _m.Called(ctx, key)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveKey provides a mock function with given fields: ctx, key
func (_m *MockInMemCache) RemoveKey(ctx context.Context, key interface{}) {
	_m.Called(ctx, key)
}

// Stats provides a mock function with given fields:
func (_m *MockInMemCache) Stats() inmemory.CacheStats {
	ret := _m.Called()

	var r0 inmemory.CacheStats
	if rf, ok := ret.Get(0).(func() inmemory.CacheStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(inmemory.CacheStats)
	}

	return r0
}

type mockConstructorTestingTNewMockInMemCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInMemCache creates a new instance of MockInMemCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInMemCache(t mockConstructorTestingTNewMockInMemCache) *MockInMemCache {
	mock := &MockInMemCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
